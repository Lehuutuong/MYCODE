
#include "StdAfx.h"
#include "stdlib.h"
#include "stdio.h"
#include "shlobj.h"
#include "io.h"

#include "Encrypt.h"

//------------------------------------------------------------------------------------------
//		암호화 모듈
//------------------------------------------------------------------------------------------
////////////////////////// Encode, Decode ////////////////////////////////

int nMaskRow = 15;
int nMaskCol = 11;

BYTE nMaskData[] = {
	0x49, 0xEB, 0xC3, 0xF4, 0x65, 0x74, 0xD2, 0x06, 0xB4, 0x3C, 0x9C, 
	0x88, 0xCE, 0x4D, 0x8D, 0x86, 0xA1, 0xAC, 0x2B, 0xBD, 0x08, 0x96, 
	0x4C, 0xFD, 0xA0, 0x09, 0x86, 0xD1, 0xD7, 0x86, 0xE8, 0x62, 0x45, 
	0x16, 0xE7, 0x99, 0x40, 0x8B, 0x9B, 0x84, 0xAA, 0x08, 0x2C, 0xFB, 
	0x0E, 0xC3, 0x87, 0x83, 0xEB, 0x0A, 0x55, 0x72, 0x50, 0x84, 0x2D, 
	0x54, 0xA9, 0xBA, 0x08, 0x8E, 0xD9, 0xD5, 0xF6, 0x41, 0x89, 0xA9, 
	0x10, 0x71, 0xBF, 0xF3, 0xAE, 0x67, 0xB2, 0xDF, 0xDA, 0x53, 0xDD, 
	0xCE, 0x04, 0x36, 0x52, 0x55, 0xF7, 0xFF, 0x51, 0x89, 0x0B, 0xF4, 
	0x19, 0x7A, 0x9C, 0x54, 0xFE, 0xFD, 0xBC, 0x3B, 0xBC, 0xAF, 0x25, 
	0xC5, 0x0B, 0x36, 0x71, 0x76, 0x73, 0xCA, 0x8E, 0xDA, 0x62, 0xF5, 
	0x6C, 0x68, 0x7C, 0x96, 0xF8, 0xAC, 0x32, 0x2C, 0x4E, 0xA6, 0x96, 
	0x51, 0x2A, 0x6D, 0x6D, 0x85, 0xA0, 0x17, 0x86, 0x2D, 0x0E, 0xDD, 
	0x4B, 0xDB, 0x4E, 0x7B, 0x96, 0xD0, 0x30, 0xD6, 0xC6, 0xC0, 0x27, 
	0xE1, 0x11, 0xD5, 0x42, 0xC1, 0x1C, 0xF6, 0x5E, 0x30, 0xC8, 0x48, 
	0x9B, 0x1F, 0x4F, 0xF5, 0x0C, 0x9F, 0x91, 0x2D, 0xB3, 0x01, 0xA8
};

int MakeRandChar()
{
	// srand(GetTickCount());
	char chRand = rand() % 256;
	return chRand;
}

void MaskData(BYTE *dest, int nLen, int nMaskNo)
{
	int nNo = nMaskNo % nMaskRow;

	for (int i = 0; i < nLen; i++)
	{
		int j = i % nMaskCol;
		dest[i] ^= nMaskData[nNo * nMaskCol + j];
	}
}

int EncryptData(BYTE *dest, BYTE *src, int nSrcLen)
{
	int ndestLen, i;

	for (i = 0; i < nSrcLen; i++)
	{
		dest[2 * i] = src[i];
		dest[2 * i + 1] = MakeRandChar();
	}
	ndestLen = nSrcLen << 1;

	int nMaskNo = rand() % 0x100;
	MaskData(dest, ndestLen, nMaskNo);

	dest[2 * i] = nMaskNo;
	ndestLen ++;

	return ndestLen;
}

int DecryptData(BYTE *dest, BYTE *src, int nSrcLen)
{
	int nMaskNo = src[nSrcLen - 1];
	nSrcLen--;

	MaskData(src, nSrcLen, nMaskNo);

	int ndestLen, i;
	for (i = 0; i < nSrcLen / 2; i++ )
		dest[i] = src[2 * i];

	ndestLen = nSrcLen >> 1;
	return ndestLen;
}
